[{"path":[]},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement wjakethompson@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dcmstan","title":"Contributing to dcmstan","text":"outlines propose change dcmstan. detailed discussion contributing r-dcm packages, please see tidyverse development contributing guide code review principles, also followed .","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dcmstan","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dcmstan","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse guide create great issue advice.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dcmstan","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"r-dcm/dcmstan\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dcmstan","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dcmstan","text":"Please note dcmstan project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://dcmstan.r-dcm.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 dcmstan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dcmstan.r-dcm.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"W. Jake Thompson. Author, maintainer. Jeffrey Hoover. Author. Auburn Jimenez. Author. . Copyright holder. . Funder.","code":""},{"path":"https://dcmstan.r-dcm.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thompson W, Hoover J, Jimenez (2024). dcmstan: Generate 'Stan' Code Estimating Diagnostic Classification Models. R package version 0.0.0.9000, https://github.com/r-dcm/dcmstan, https://dcmstan.r-dcm.org.","code":"@Manual{,   title = {dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models},   author = {W. Jake Thompson and Jeffrey Hoover and Auburn Jimenez},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/r-dcm/dcmstan},   url = {https://dcmstan.r-dcm.org}, }"},{"path":[]},{"path":"https://dcmstan.r-dcm.org/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"dcmstan provides functionality automatically generate Stan code estimating diagnostic classification models. Using dcmstan, can: Mix match different measurement structural models specify diagnostic model dcm_specify(), Define prior() distributions, Generate Stan code model, given specifications priors generate_stan() dcmstan used backend generating Stan code needed estimate evaluate measr package. use measr estimate models, need use dcmstan generate Stan code .","code":""},{"path":"https://dcmstan.r-dcm.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"can install development version dcmstan GitHub :","code":"# install.packages(\"pak\") pak::pak(\"r-dcm/dcmstan\")"},{"path":"https://dcmstan.r-dcm.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"","code":"library(dcmstan) library(dcmdata)  new_model <- dcm_specify(qmatrix = mdm_qmatrix, identifier = \"item\",                          measurement_model = lcdm(),                          structural_model = unconstrained())  generate_stan(new_model) #> data { #>   int<lower=1> I;                      // number of items #>   int<lower=1> R;                      // number of respondents #>   int<lower=1> N;                      // number of observations #>   int<lower=1> C;                      // number of classes #>   int<lower=1> A;                      // number of attributes #>   array[N] int<lower=1,upper=I> ii;    // item for observation n #>   array[N] int<lower=1,upper=R> rr;    // respondent for observation n #>   array[N] int<lower=0,upper=1> y;     // score for observation n #>   array[R] int<lower=1,upper=N> start; // starting row for respondent R #>   array[R] int<lower=1,upper=I> num;   // number of items for respondent R #>   matrix[C,A] Alpha;                   // attribute pattern for each class #>   matrix[I,C] Xi;                      // class attribute mastery indicator #> } #> parameters { #>   simplex[C] Vc;                  // base rates of class membership #>  #>   ////////////////////////////////// item intercepts #>   real l1_0; #>   real l2_0; #>   real l3_0; #>   real l4_0; #>  #>   ////////////////////////////////// item main effects #>   real<lower=0> l1_11; #>   real<lower=0> l2_11; #>   real<lower=0> l3_11; #>   real<lower=0> l4_11; #> } #> transformed parameters { #>   vector[C] log_Vc = log(Vc); #>   matrix[I,C] pi; #>  #>   ////////////////////////////////// probability of correct response #>   pi[1,1] = inv_logit(l1_0); #>   pi[1,2] = inv_logit(l1_0+l1_11); #>   pi[2,1] = inv_logit(l2_0); #>   pi[2,2] = inv_logit(l2_0+l2_11); #>   pi[3,1] = inv_logit(l3_0); #>   pi[3,2] = inv_logit(l3_0+l3_11); #>   pi[4,1] = inv_logit(l4_0); #>   pi[4,2] = inv_logit(l4_0+l4_11); #> } #> model { #>  #>   ////////////////////////////////// priors #>   Vc ~ dirichlet(rep_vector(1, C)); #>   l1_0 ~ normal(0, 2); #>   l1_11 ~ lognormal(0, 1); #>   l2_0 ~ normal(0, 2); #>   l2_11 ~ lognormal(0, 1); #>   l3_0 ~ normal(0, 2); #>   l3_11 ~ lognormal(0, 1); #>   l4_0 ~ normal(0, 2); #>   l4_11 ~ lognormal(0, 1); #>  #>   ////////////////////////////////// likelihood #>   for (r in 1:R) { #>     row_vector[C] ps; #>     for (c in 1:C) { #>       array[num[r]] real log_items; #>       for (m in 1:num[r]) { #>         int i = ii[start[r] + m - 1]; #>         log_items[m] = y[start[r] + m - 1] * log(pi[i,c]) + #>                        (1 - y[start[r] + m - 1]) * log(1 - pi[i,c]); #>       } #>       ps[c] = log_Vc[c] + sum(log_items); #>     } #>     target += log_sum_exp(ps); #>   } #> }"},{"path":"https://dcmstan.r-dcm.org/index.html","id":"contributions-and-code-of-conduct","dir":"","previous_headings":"","what":"Contributions and Code of Conduct","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"Contributions welcome. ensure smooth process, please review Contributing Guide. Please note dcmdata project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mastery profiles — create_profiles","title":"Generate mastery profiles — create_profiles","text":"Given number attributes, generate possible patterns attribute mastery.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mastery profiles — create_profiles","text":"","code":"create_profiles(attributes)"},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mastery profiles — create_profiles","text":"attributes Positive integer. number attributes measured.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mastery profiles — create_profiles","text":"tibble possible attribute mastery profiles. row profile, column indicates whether attribute column mastered (1) mastered (0). Thus, tibble 2^attributes rows, attributes columns.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mastery profiles — create_profiles","text":"","code":"create_profiles(3L) #> # A tibble: 8 × 3 #>    att1  att2  att3 #>   <int> <int> <int> #> 1     0     0     0 #> 2     1     0     0 #> 3     0     1     0 #> 4     0     0     1 #> 5     1     1     0 #> 6     1     0     1 #> 7     0     1     1 #> 8     1     1     1 create_profiles(5) #> # A tibble: 32 × 5 #>     att1  att2  att3  att4  att5 #>    <int> <int> <int> <int> <int> #>  1     0     0     0     0     0 #>  2     1     0     0     0     0 #>  3     0     1     0     0     0 #>  4     0     0     1     0     0 #>  5     0     0     0     1     0 #>  6     0     0     0     0     1 #>  7     1     1     0     0     0 #>  8     1     0     1     0     0 #>  9     1     0     0     1     0 #> 10     1     0     0     0     1 #> # ℹ 22 more rows"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a diagnostic classification model — dcm_specify","title":"Specify a diagnostic classification model — dcm_specify","text":"Create specifications Bayesian diagnostic classification model. Choose measurement structural models match assumptions data. choose prior distributions, use defaults. model specification can used generate 'Stan' code needed estimate model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a diagnostic classification model — dcm_specify","text":"","code":"dcm_specify(   qmatrix,   identifier = NULL,   measurement_model = lcdm(),   structural_model = unconstrained(),   priors = NULL )"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a diagnostic classification model — dcm_specify","text":"qmatrix Q-matrix. data frame 1 row per item 1 column per attribute. May optionally include additional column item identifiers. identifier column included, specified identifier. cells remaining attribute columns either 0 (item measure attribute) 1 (item measure attribute). identifier Optional. present, quoted name column qmatrix contains item identifiers. measurement_model measurement model object (e.g., lcdm(), dina()). structural_model structural model object (e.g., unconstrained(), independent()). priors prior object created prior(). NULL (default), default prior distributions defined default_dcm_priors() used.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a diagnostic classification model — dcm_specify","text":"dcm_specification object.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a diagnostic classification model — dcm_specify","text":"","code":"qmatrix <- data.frame(   att1 = sample(0:1, size = 15, replace = TRUE),   att2 = sample(0:1, size = 15, replace = TRUE),   att3 = sample(0:1, size = 15, replace = TRUE),   att4 = sample(0:1, size = 15, replace = TRUE) )  dcm_specify(qmatrix = qmatrix,             measurement_model = lcdm(),             structural_model = unconstrained()) #> A loglinear cognitive diagnostic model (LCDM) measuring 4 attributes with #> 15 items. #>  #> ℹ Attributes: #> • \"att1\" (4 items) #> • \"att2\" (7 items) #> • \"att3\" (7 items) #> • \"att4\" (9 items) #>  #> ℹ Attribute structure: #>   Unconstrained #>  #> ℹ Prior distributions: #>   intercept ~ normal(0, 2) #>   maineffect ~ lognormal(0, 1) #>   interaction ~ normal(0, 2) #>   `Vc` ~ dirichlet(1, 1, 1, 1)"},{"path":"https://dcmstan.r-dcm.org/reference/dcmstan-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","title":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","text":"Diagnostic classification models psychometric models used categorically estimate respondents mastery, proficiency, set predefined skills (Bradshaw, 2016, doi:10.1002/9781118956588.ch13 ). Diagnostic models can estimated 'Stan'; however, necessary scripts can long complicated. package automates creation 'Stan' scripts diagnostic classification models. Specify different types diagnostic models, define prior distributions, automatically generate necessary 'Stan' code estimating model.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcmstan-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","text":"Maintainer: W. Jake Thompson wjakethompson@gmail.com (ORCID) Authors: Jeffrey Hoover jeffrey.c.hoover@gmail.com (ORCID) Auburn Jimenez auburn.jimenez34@gmail.com (ORCID) contributors: University Kansas [copyright holder] Institute Education Sciences [funder]","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for diagnostic classification models — default_dcm_priors","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"View prior distributions applied default using given measurement structural model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"","code":"default_dcm_priors(measurement_model = NULL, structural_model = NULL)"},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"measurement_model measurement model object (e.g., lcdm(), dina()). structural_model structural model object (e.g., unconstrained(), independent()).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"dcmprior object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"","code":"default_dcm_priors(lcdm(), unconstrained()) #> # A tibble: 4 × 3 #>   type        coefficient prior                       #>   <chr>       <chr>       <chr>                       #> 1 intercept   NA          normal(0, 2)                #> 2 maineffect  NA          lognormal(0, 1)             #> 3 interaction NA          normal(0, 2)                #> 4 structural  Vc          dirichlet(rep_vector(1, C)) default_dcm_priors(dina(), independent()) #> # A tibble: 3 × 3 #>   type       coefficient prior       #>   <chr>      <chr>       <chr>       #> 1 slip       NA          beta(5, 25) #> 2 guess      NA          beta(5, 25) #> 3 structural NA          beta(1, 1)"},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 'Stan' code for a diagnostic classification models — generate_stan","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"Given specification diagnostic classification model, automatically generate 'Stan' code necessary estimate model. details code blocks relate diagnostic models, see da Silva et al. (2017), Jiang Carter (2019), Thompson (2019).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"","code":"generate_stan(x, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"x model specification (e.g., dcm_specify()) object. ... Additional arguments passed methods.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"glue object containing 'Stan' code specified model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"da Silva, M. ., de Oliveira, E. S. B., von Davier, . ., Bazán, J. L. (2017). Estimating DINA model parameters using -U-Turn sampler. Biometrical Journal, 60(2), 352-368. doi:10.1002/bimj.201600225 Jiang, Z., & Carter, R. (2019). Using Hamiltonian Monte Carlo estimate log-linear cognitive diagnosis model via Stan. Behavior Research Methods, 51, 651-662. doi:10.3758/s13428-018-1069-9 Thompson, W. J. (2019). Bayesian psychometrics diagnostic assessments: proof concept (Research Report . 19-01). University Kansas; Accessible Teaching, Learning, Assessment Systems. doi:10.35542/osf.io/jzqs8","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generate_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 'Stan' code for a diagnostic classification models — generate_stan","text":"","code":"qmatrix <- data.frame(   att1 = sample(0:1, size = 5, replace = TRUE),   att2 = sample(0:1, size = 5, replace = TRUE) )  model_spec <- dcm_specify(qmatrix = qmatrix,                           measurement_model = lcdm(),                           structural_model = unconstrained())  generate_stan(model_spec) #> data { #>   int<lower=1> I;                      // number of items #>   int<lower=1> R;                      // number of respondents #>   int<lower=1> N;                      // number of observations #>   int<lower=1> C;                      // number of classes #>   int<lower=1> A;                      // number of attributes #>   array[N] int<lower=1,upper=I> ii;    // item for observation n #>   array[N] int<lower=1,upper=R> rr;    // respondent for observation n #>   array[N] int<lower=0,upper=1> y;     // score for observation n #>   array[R] int<lower=1,upper=N> start; // starting row for respondent R #>   array[R] int<lower=1,upper=I> num;   // number of items for respondent R #>   matrix[C,A] Alpha;                   // attribute pattern for each class #>   matrix[I,C] Xi;                      // class attribute mastery indicator #> } #> parameters { #>   simplex[C] Vc;                  // base rates of class membership #>  #>   ////////////////////////////////// item intercepts #>   real l1_0; #>   real l2_0; #>   real l3_0; #>   real l4_0; #>   real l5_0; #>  #>   ////////////////////////////////// item main effects #>   real<lower=0> l1_12; #>   real<lower=0> l3_12; #>   real<lower=0> l4_11; #>   real<lower=0> l4_12; #>  #>   ////////////////////////////////// item interactions #>   real<lower=-1 * min([l4_11,l4_12])> l4_212; #> } #> transformed parameters { #>   vector[C] log_Vc = log(Vc); #>   matrix[I,C] pi; #>  #>   ////////////////////////////////// probability of correct response #>   pi[1,1] = inv_logit(l1_0); #>   pi[1,2] = inv_logit(l1_0); #>   pi[1,3] = inv_logit(l1_0+l1_12); #>   pi[1,4] = inv_logit(l1_0+l1_12); #>   pi[2,1] = inv_logit(l2_0); #>   pi[2,2] = inv_logit(l2_0); #>   pi[2,3] = inv_logit(l2_0); #>   pi[2,4] = inv_logit(l2_0); #>   pi[3,1] = inv_logit(l3_0); #>   pi[3,2] = inv_logit(l3_0); #>   pi[3,3] = inv_logit(l3_0+l3_12); #>   pi[3,4] = inv_logit(l3_0+l3_12); #>   pi[4,1] = inv_logit(l4_0); #>   pi[4,2] = inv_logit(l4_0+l4_11); #>   pi[4,3] = inv_logit(l4_0+l4_12); #>   pi[4,4] = inv_logit(l4_0+l4_11+l4_12+l4_212); #>   pi[5,1] = inv_logit(l5_0); #>   pi[5,2] = inv_logit(l5_0); #>   pi[5,3] = inv_logit(l5_0); #>   pi[5,4] = inv_logit(l5_0); #> } #> model { #>  #>   ////////////////////////////////// priors #>   Vc ~ dirichlet(rep_vector(1, C)); #>   l1_0 ~ normal(0, 2); #>   l1_12 ~ lognormal(0, 1); #>   l2_0 ~ normal(0, 2); #>   l3_0 ~ normal(0, 2); #>   l3_12 ~ lognormal(0, 1); #>   l4_0 ~ normal(0, 2); #>   l4_11 ~ lognormal(0, 1); #>   l4_12 ~ lognormal(0, 1); #>   l4_212 ~ normal(0, 2); #>   l5_0 ~ normal(0, 2); #>  #>   ////////////////////////////////// likelihood #>   for (r in 1:R) { #>     row_vector[C] ps; #>     for (c in 1:C) { #>       array[num[r]] real log_items; #>       for (m in 1:num[r]) { #>         int i = ii[start[r] + m - 1]; #>         log_items[m] = y[start[r] + m - 1] * log(pi[i,c]) + #>                        (1 - y[start[r] + m - 1]) * log(1 - pi[i,c]); #>       } #>       ps[c] = log_Vc[c] + sum(log_items); #>     } #>     target += log_sum_exp(ps); #>   } #> }"},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify parameters included in a diagnostic classification model — get_parameters","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"specifying prior distributions, often useful see parameters included given model. Using Q-matrix type diagnostic model estimated, can create list included parameters prior can specified.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"","code":"get_parameters(x, qmatrix, ..., identifier = NULL)"},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"x model specification (e.g., dcm_specify(), measurement model (e.g., lcdm()), structural model (e.g., unconstrained()) object. qmatrix Q-matrix. data frame 1 row per item 1 column per attribute. May optionally include additional column item identifiers. identifier column included, specified identifier. cells remaining attribute columns either 0 (item measure attribute) 1 (item measure attribute). ... Additional arguments passed methods. identifier Optional. present, quoted name column qmatrix contains item identifiers.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"tibble showing available parameter types coefficients specified model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"","code":"qmatrix <- tibble::tibble(item = paste0(\"item_\", 1:10),                           att1 = sample(0:1, size = 10, replace = TRUE),                           att2 = sample(0:1, size = 10, replace = TRUE),                           att3 = sample(0:1, size = 10, replace = TRUE),                           att4 = sample(0:1, size = 10, replace = TRUE)) get_parameters(dina(), qmatrix = qmatrix, identifier = \"item\") #> # A tibble: 20 × 3 #>    item    type  coefficient #>    <chr>   <chr> <chr>       #>  1 item_1  guess guess[1]    #>  2 item_1  slip  slip[1]     #>  3 item_2  guess guess[2]    #>  4 item_2  slip  slip[2]     #>  5 item_3  guess guess[3]    #>  6 item_3  slip  slip[3]     #>  7 item_4  guess guess[4]    #>  8 item_4  slip  slip[4]     #>  9 item_5  guess guess[5]    #> 10 item_5  slip  slip[5]     #> 11 item_6  guess guess[6]    #> 12 item_6  slip  slip[6]     #> 13 item_7  guess guess[7]    #> 14 item_7  slip  slip[7]     #> 15 item_8  guess guess[8]    #> 16 item_8  slip  slip[8]     #> 17 item_9  guess guess[9]    #> 18 item_9  slip  slip[9]     #> 19 item_10 guess guess[10]   #> 20 item_10 slip  slip[10]"},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement models for diagnostic classification — measurement-model","title":"Measurement models for diagnostic classification — measurement-model","text":"measurement model defines items relate attributes. currently supported options measurement models : loglinear cognitive diagnostic model (LCDM); deterministic input, noisy \"\", gate (DINA); deterministic input, noisy \"\" gate (DINO); compensatory, reparameterized unified model (C-RUM). See details additional information model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement models for diagnostic classification — measurement-model","text":"","code":"lcdm(max_interaction = Inf)  dina()  dino()  crum()"},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement models for diagnostic classification — measurement-model","text":"max_interaction LCDM, highest item-level interaction include model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement models for diagnostic classification — measurement-model","text":"measurement model object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measurement models for diagnostic classification — measurement-model","text":"LCDM (Henson et al., 2009; Henson & Templin, 2019) general diagnostic classification model subsumes restrictive models. probability respondent providing correct response parameterized like regression model. item, LCDM includes intercept, represents log-odds providing correct response none attributes required item present. Main effect parameters represent increase log-odds required attribute present. Finally, interaction terms define change log-odds (main effects) one required attributes present. C-RUM (Hartz, 2002) similar LCDM, constrained include intercept main effect parameters. , interaction terms included C-RUM. DINA model (de la Torre & Douglas, 2004; Junker & Sijtsma, 2001) restrictive non-compensatory model. item two parameters estimated. guessing parameter defines probability respondent providing correct response required attributes present. Conversely, slipping parameter defines probability providing incorrect response required attributes present. Thus, DINA model takes \"--nothing\" approach. Either respondent attributes required item, . increase probability providing correct response subset required attributes present. DINO model (Templin & Henson, 2006) inverse DINA model. Whereas DINA model \"--nothing\", DINO model can thought \"anything--nothing\". DINO model, guessing parameter defines probability correct response none required attributes present. slipping parameter probability incorrect response required attributes present. Therefore, using DINO model, presence required attributes results increased probability correct response, additional increase probability presence one required attributes.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measurement models for diagnostic classification — measurement-model","text":"de la Torre, J., & Douglas, J. . (2004). Higher-order latent trait models cognitive diagnosis. Psychometrika, 69(3), 333-353. doi:10.1007/BF02295640 Hartz, S. M. (2002). Bayesian framework unified model assessing cognitive abilities: Blending theory practicality (Publication . 3044108) [Doctoral dissertation, University Illinois Urbana-Champaign]. ProQuest Dissertations Publishing. Henson, R. ., Templin, J. L., & Willse, J. T. (2009). Defining family cognitive diagnosis models using log-linear models latent variables. Psychometrika, 74(2), 191-210. doi:10.1007/s11336-008-9089-5 Henson, R., & Templin, J. L. (2019). Loglinear cognitive diagnostic model (LCDM). M. von Davier & Y.-S. Lee (Eds.), Handbook Diagnostic Classification Models (pp. 171-185). Springer International Publishing. doi:10.1007/978-3-030-05584-4_8 Junker, B. W., & Sijtsma, K. (2001). Cognitive assessment models assumptions, connections nonparametric item response theory. Applied Psychological Measurement, 25(3), 258-272. doi:10.1177/01466210122032064 Templin, J. L., & Henson, R. . (2006). Measurement psychological disorders using cognitive diagnosis models. Psychological Methods, 11(3), 287-305. doi:10.1037/1082-989X.11.3.287","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement models for diagnostic classification — measurement-model","text":"","code":"lcdm() #> <dcmstan::LCDM> #>  @ model     : chr \"lcdm\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num Inf  lcdm(max_interaction = 2) #> <dcmstan::LCDM> #>  @ model     : chr \"lcdm\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num 2  dina() #> <dcmstan::DINA> #>  @ model     : chr \"dina\" #>  @ model_args: list()"},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior definitions for diagnostic classification models — prior","title":"Prior definitions for diagnostic classification models — prior","text":"Define prior distributions types parameters specific parameters within model. complete list types parameters available given model, see get_parameters().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior definitions for diagnostic classification models — prior","text":"","code":"prior(distribution, type, coefficient = NA, lower_bound = NA, upper_bound = NA)"},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior definitions for diagnostic classification models — prior","text":"distribution distribution statement prior (e.g., normal(0, 2)). complete list available distributions, see Stan documentation https://mc-stan.org/docs/. type type parameter apply prior . Parameter types vary model. Use get_parameters() see list possible types chosen model. coefficient Name specific parameter within defined parameter type. NA (default), prior applied parameters within type. lower_bound Optional. lower bound distribution truncated. upper_bound Optional. upper bound distribution truncated.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior definitions for diagnostic classification models — prior","text":"dcmprior object.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior definitions for diagnostic classification models — prior","text":"","code":"prior(normal(0, 2), type = \"intercept\") #> # A tibble: 1 × 3 #>   type      coefficient prior        #>   <chr>     <chr>       <chr>        #> 1 intercept NA          normal(0, 2)  c(prior(beta(5, 17), type = \"slip\"),   prior(beta(5, 25), type = \"guess\")) #> # A tibble: 2 × 3 #>   type  coefficient prior       #>   <chr> <chr>       <chr>       #> 1 slip  NA          beta(5, 17) #> 2 guess NA          beta(5, 25)"},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural models for diagnostic classification — structural-model","title":"Structural models for diagnostic classification — structural-model","text":"Structural models define attributes related one another. currently supported options structural models : unconstrained independent attributes. See details additional information model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural models for diagnostic classification — structural-model","text":"","code":"unconstrained()  independent()"},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural models for diagnostic classification — structural-model","text":"structural model object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural models for diagnostic classification — structural-model","text":"unconstrained structural model places constraints attributes relate . equivalent saturated model described Hu & Templin (2020) Chapter 8 Rupp et al. (2010). independent attributes model assumes presence attributes unrelated . , relationship presence one attribute presence . example independent attributes model, see Lee (2016).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Structural models for diagnostic classification — structural-model","text":"Hu, B., & Templin, J. (2020). Using diagnostic classification models validate attribute hierarchies evaluate model fit Bayesian Networks. Multivariate Behavioral Research, 55(2), 300-311. doi:10.1080/00273171.2019.1632165 Lee, S. Y. (2016). Cognitive diagnosis model: DINA model independent attributes. https://mc-stan.org/documentation/case-studies/dina_independent.html Rupp, . ., Templin, J., & Henson, R. . (2010). Diagnostic measurement: Theory, methods, applications. Guilford Press.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural models for diagnostic classification — structural-model","text":"","code":"unconstrained() #> <dcmstan::UNCONSTRAINED> #>  @ model     : chr \"unconstrained\" #>  @ model_args: list()  independent() #> <dcmstan::INDEPENDENT> #>  @ model     : chr \"independent\" #>  @ model_args: list()"}]
