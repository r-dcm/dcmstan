[{"path":[]},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement wjakethompson@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dcmstan.r-dcm.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dcmstan","title":"Contributing to dcmstan","text":"outlines propose change dcmstan. detailed discussion contributing r-dcm packages, please see tidyverse development contributing guide code review principles, also followed .","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dcmstan","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dcmstan","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse guide create great issue advice.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dcmstan","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"r-dcm/dcmstan\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dcmstan","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://dcmstan.r-dcm.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dcmstan","text":"Please note dcmstan project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://dcmstan.r-dcm.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 dcmstan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dcmstan.r-dcm.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"W. Jake Thompson. Author, maintainer. Jeffrey Hoover. Author. Auburn Jimenez. Author. . Copyright holder. . Funder.","code":""},{"path":"https://dcmstan.r-dcm.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thompson W, Hoover J, Jimenez (2025). dcmstan: Generate 'Stan' Code Estimating Diagnostic Classification Models. R package version 0.0.0.9001, https://dcmstan.r-dcm.org.","code":"@Manual{,   title = {dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models},   author = {W. Jake Thompson and Jeffrey Hoover and Auburn Jimenez},   year = {2025},   note = {R package version 0.0.0.9001},   url = {https://dcmstan.r-dcm.org}, }"},{"path":[]},{"path":"https://dcmstan.r-dcm.org/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"dcmstan provides functionality automatically generate Stan code estimating diagnostic classification models. Using dcmstan, can: Mix match different measurement structural models specify diagnostic model dcm_specify(), Define prior() distributions, Generate Stan code model, given specifications priors stan_code() dcmstan used backend generating Stan code needed estimate evaluate measr package. use measr estimate models, need use dcmstan generate Stan code .","code":""},{"path":"https://dcmstan.r-dcm.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"can install development version dcmstan GitHub :","code":"# install.packages(\"pak\") pak::pak(\"r-dcm/dcmstan\")"},{"path":"https://dcmstan.r-dcm.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"","code":"library(dcmstan) library(dcmdata)  new_model <- dcm_specify(qmatrix = mdm_qmatrix, identifier = \"item\",                          measurement_model = lcdm(),                          structural_model = unconstrained())  stan_code(new_model) #> data { #>   int<lower=1> I;                      // number of items #>   int<lower=1> R;                      // number of respondents #>   int<lower=1> N;                      // number of observations #>   int<lower=1> C;                      // number of classes #>   array[N] int<lower=1,upper=I> ii;    // item for observation n #>   array[N] int<lower=1,upper=R> rr;    // respondent for observation n #>   array[N] int<lower=0,upper=1> y;     // score for observation n #>   array[R] int<lower=1,upper=N> start; // starting row for respondent R #>   array[R] int<lower=1,upper=I> num;   // number items for respondent R #> } #> parameters { #>   simplex[C] Vc;                  // base rates of class membership #>  #>   ////////////////////////////////// item intercepts #>   real l1_0; #>   real l2_0; #>   real l3_0; #>   real l4_0; #>  #>   ////////////////////////////////// item main effects #>   real<lower=0> l1_11; #>   real<lower=0> l2_11; #>   real<lower=0> l3_11; #>   real<lower=0> l4_11; #> } #> transformed parameters { #>   vector[C] log_Vc = log(Vc); #>   matrix[I,C] pi; #>  #>   ////////////////////////////////// probability of correct response #>   pi[1,1] = inv_logit(l1_0); #>   pi[1,2] = inv_logit(l1_0+l1_11); #>   pi[2,1] = inv_logit(l2_0); #>   pi[2,2] = inv_logit(l2_0+l2_11); #>   pi[3,1] = inv_logit(l3_0); #>   pi[3,2] = inv_logit(l3_0+l3_11); #>   pi[4,1] = inv_logit(l4_0); #>   pi[4,2] = inv_logit(l4_0+l4_11); #> } #> model { #>  #>   ////////////////////////////////// priors #>   Vc ~ dirichlet(rep_vector(1, C)); #>   l1_0 ~ normal(0, 2); #>   l1_11 ~ lognormal(0, 1); #>   l2_0 ~ normal(0, 2); #>   l2_11 ~ lognormal(0, 1); #>   l3_0 ~ normal(0, 2); #>   l3_11 ~ lognormal(0, 1); #>   l4_0 ~ normal(0, 2); #>   l4_11 ~ lognormal(0, 1); #>  #>   ////////////////////////////////// likelihood #>   for (r in 1:R) { #>     row_vector[C] ps; #>     for (c in 1:C) { #>       array[num[r]] real log_items; #>       for (m in 1:num[r]) { #>         int i = ii[start[r] + m - 1]; #>         log_items[m] = y[start[r] + m - 1] * log(pi[i,c]) + #>                        (1 - y[start[r] + m - 1]) * log(1 - pi[i,c]); #>       } #>       ps[c] = log_Vc[c] + sum(log_items); #>     } #>     target += log_sum_exp(ps); #>   } #> }"},{"path":"https://dcmstan.r-dcm.org/index.html","id":"contributions-and-code-of-conduct","dir":"","previous_headings":"","what":"Contributions and Code of Conduct","title":"Generate Stan Code for Estimating Diagnostic Classification Models","text":"Contributions welcome. ensure smooth process, please review Contributing Guide. Please note dcmstan project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mastery profiles — create_profiles","title":"Generate mastery profiles — create_profiles","text":"Given number attributes model specification, generate possible attribute patterns.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mastery profiles — create_profiles","text":"","code":"create_profiles(x, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mastery profiles — create_profiles","text":"x object used generate possible patterns. number (number attributes; e.g., 3, 4), object defines attribute relationships (e.g., structural model model specification). ... Additional arguments passed methods. See details.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mastery profiles — create_profiles","text":"tibble possible attribute patterns. row profile, column indicates whether attribute column present (1) (0).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate mastery profiles — create_profiles","text":"Additional arguments passed methods: keep_names: x model specification, real attribute names used (TRUE; default), replaced generic names (FALSE; e.g., \"att1\", \"att2\", \"att3\"). attributes: x structural model, vector attribute names, qmatrix_meta$attribute_names DCM specification.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/create_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mastery profiles — create_profiles","text":"","code":"create_profiles(3L) #> # A tibble: 8 × 3 #>    att1  att2  att3 #>   <int> <int> <int> #> 1     0     0     0 #> 2     1     0     0 #> 3     0     1     0 #> 4     0     0     1 #> 5     1     1     0 #> 6     1     0     1 #> 7     0     1     1 #> 8     1     1     1  create_profiles(5) #> # A tibble: 32 × 5 #>     att1  att2  att3  att4  att5 #>    <int> <int> <int> <int> <int> #>  1     0     0     0     0     0 #>  2     1     0     0     0     0 #>  3     0     1     0     0     0 #>  4     0     0     1     0     0 #>  5     0     0     0     1     0 #>  6     0     0     0     0     1 #>  7     1     1     0     0     0 #>  8     1     0     1     0     0 #>  9     1     0     0     1     0 #> 10     1     0     0     0     1 #> # ℹ 22 more rows  create_profiles(unconstrained(), attributes = c(\"att1\", \"att2\")) #> # A tibble: 4 × 2 #>    att1  att2 #>   <int> <int> #> 1     0     0 #> 2     1     0 #> 3     0     1 #> 4     1     1  create_profiles(hdcm(\"att1 -> att2 -> att3\"),                 attributes = c(\"att1\", \"att2\", \"att3\")) #> # A tibble: 4 × 3 #>    att1  att2  att3 #>   <int> <int> <int> #> 1     0     0     0 #> 2     1     0     0 #> 3     1     1     0 #> 4     1     1     1"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 model specification class — dcm_specification","title":"S7 model specification class — dcm_specification","text":"dcm_specification constructor exported facilitate defining methods packages. expect recommend calling function directly. Rather, create model specification, one use dcm_specify().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 model specification class — dcm_specification","text":"","code":"dcm_specification(   qmatrix = list(),   qmatrix_meta = list(),   measurement_model = measurement(),   structural_model = structural(),   priors = dcmprior() )"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S7 model specification class — dcm_specification","text":"qmatrix cleaned Q-matrix, returned rdcmchecks::clean_qmatrix(). qmatrix_meta list Q-matrix metadata consisting (Q-matrix) elements returned rdcmchecks::clean_qmatrix(). measurement_model measurement model object. structural_model structural model object. priors prior object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S7 model specification class — dcm_specification","text":"dcm_specification object.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S7 model specification class — dcm_specification","text":"","code":"qmatrix <- tibble::tibble(   att1 = sample(0:1, size = 15, replace = TRUE),   att2 = sample(0:1, size = 15, replace = TRUE),   att3 = sample(0:1, size = 15, replace = TRUE),   att4 = sample(0:1, size = 15, replace = TRUE) )  dcm_specification(qmatrix = qmatrix,                   qmatrix_meta = list(attribute_names = paste0(\"att\", 1:4),                                       item_identifier = NULL,                                       item_names = 1:15),                   measurement_model = lcdm(),                   structural_model = unconstrained(),                   priors = default_dcm_priors(lcdm(), unconstrained())) #> A loglinear cognitive diagnostic model (LCDM) measuring 4 attributes with #> 15 items. #>  #> ℹ Attributes: #>  #> ℹ Attribute structure: #>   Unconstrained #>  #> ℹ Prior distributions: #>   intercept ~ normal(0, 2) #>   maineffect ~ lognormal(0, 1) #>   interaction ~ normal(0, 2) #>   `Vc` ~ dirichlet()"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a diagnostic classification model — dcm_specify","title":"Specify a diagnostic classification model — dcm_specify","text":"Create specifications Bayesian diagnostic classification model. Choose measurement structural models match assumptions data. choose prior distributions, use defaults. model specification can used generate 'Stan' code needed estimate model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a diagnostic classification model — dcm_specify","text":"","code":"dcm_specify(   qmatrix,   identifier = NULL,   measurement_model = lcdm(),   structural_model = unconstrained(),   priors = NULL )"},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a diagnostic classification model — dcm_specify","text":"qmatrix Q-matrix. data frame 1 row per item 1 column per attribute. May optionally include additional column item identifiers. identifier column included, specified identifier. cells remaining attribute columns either 0 (item measure attribute) 1 (item measure attribute). identifier Optional. present, quoted name column qmatrix contains item identifiers. measurement_model measurement model object. structural_model structural model object. priors prior object created prior(). NULL (default), default prior distributions defined default_dcm_priors() used.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a diagnostic classification model — dcm_specify","text":"dcm_specification object.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcm_specify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a diagnostic classification model — dcm_specify","text":"","code":"qmatrix <- data.frame(   att1 = sample(0:1, size = 15, replace = TRUE),   att2 = sample(0:1, size = 15, replace = TRUE),   att3 = sample(0:1, size = 15, replace = TRUE),   att4 = sample(0:1, size = 15, replace = TRUE) )  dcm_specify(qmatrix = qmatrix,             measurement_model = lcdm(),             structural_model = unconstrained()) #> A loglinear cognitive diagnostic model (LCDM) measuring 4 attributes with #> 15 items. #>  #> ℹ Attributes: #> • \"att1\" (7 items) #> • \"att2\" (5 items) #> • \"att3\" (4 items) #> • \"att4\" (7 items) #>  #> ℹ Attribute structure: #>   Unconstrained #>  #> ℹ Prior distributions: #>   intercept ~ normal(0, 2) #>   maineffect ~ lognormal(0, 1) #>   interaction ~ normal(0, 2) #>   `Vc` ~ dirichlet(1, 1, 1, 1)"},{"path":"https://dcmstan.r-dcm.org/reference/dcmprior.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 prior class — dcmprior","title":"S7 prior class — dcmprior","text":"dcmprior constructor exported facilitate defining methods packages. expect recommend calling function directly. Rather, create model specification, one use prior() default_dcm_priors().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcmprior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 prior class — dcmprior","text":"","code":"dcmprior(   distribution = character(0),   type = NA_character_,   coefficient = NA_character_,   lower_bound = NA_real_,   upper_bound = NA_real_ )"},{"path":"https://dcmstan.r-dcm.org/reference/dcmprior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S7 prior class — dcmprior","text":"distribution distribution statement prior (e.g., normal(0, 2)). complete list available distributions, see Stan documentation https://mc-stan.org/docs/. type type parameter apply prior . Parameter types vary model. Use get_parameters() see list possible types chosen model. coefficient Name specific parameter within defined parameter type. NA (default), prior applied parameters within type. lower_bound Optional. lower bound distribution truncated. upper_bound Optional. upper bound distribution truncated.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/dcmprior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S7 prior class — dcmprior","text":"dcmprior object.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcmprior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S7 prior class — dcmprior","text":"","code":"dcmprior(   distribution = \"normal(0, 1)\",   type = \"intercept\" ) #> # A tibble: 1 × 3 #>   type      coefficient prior        #>   <chr>     <chr>       <chr>        #> 1 intercept NA          normal(0, 1)"},{"path":"https://dcmstan.r-dcm.org/reference/dcmstan-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","title":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","text":"Diagnostic classification models psychometric models used categorically estimate respondents mastery, proficiency, set predefined skills (Bradshaw, 2016, doi:10.1002/9781118956588.ch13 ). Diagnostic models can estimated 'Stan'; however, necessary scripts can long complicated. package automates creation 'Stan' scripts diagnostic classification models. Specify different types diagnostic models, define prior distributions, automatically generate necessary 'Stan' code estimating model.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/dcmstan-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dcmstan: Generate 'Stan' Code for Estimating Diagnostic Classification Models — dcmstan-package","text":"Maintainer: W. Jake Thompson wjakethompson@gmail.com (ORCID) Authors: Jeffrey Hoover jeffrey.c.hoover@gmail.com (ORCID) Auburn Jimenez auburn.jimenez34@gmail.com (ORCID) contributors: University Kansas [copyright holder] Institute Education Sciences [funder]","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors for diagnostic classification models — default_dcm_priors","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"View prior distributions applied default using given measurement structural model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"","code":"default_dcm_priors(measurement_model = NULL, structural_model = NULL)"},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"measurement_model measurement model object. structural_model structural model object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"dcmprior object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/default_dcm_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default priors for diagnostic classification models — default_dcm_priors","text":"","code":"default_dcm_priors(lcdm(), unconstrained()) #> # A tibble: 4 × 3 #>   type        coefficient prior                       #>   <chr>       <chr>       <chr>                       #> 1 intercept   NA          normal(0, 2)                #> 2 maineffect  NA          lognormal(0, 1)             #> 3 interaction NA          normal(0, 2)                #> 4 structural  Vc          dirichlet(rep_vector(1, C)) default_dcm_priors(dina(), independent()) #> # A tibble: 3 × 3 #>   type       coefficient prior       #>   <chr>      <chr>       <chr>       #> 1 slip       NA          beta(5, 25) #> 2 guess      NA          beta(5, 25) #> 3 structural NA          beta(1, 1)  default_dcm_priors(lcdm(), loglinear()) #> # A tibble: 4 × 3 #>   type        coefficient prior           #>   <chr>       <chr>       <chr>           #> 1 intercept   NA          normal(0, 2)    #> 2 maineffect  NA          lognormal(0, 1) #> 3 interaction NA          normal(0, 2)    #> 4 structural  NA          normal(0, 10)"},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Generated quantities for diagnostic classification — generated-quantities","title":"Generated quantities for diagnostic classification — generated-quantities","text":"Generated quantities values calculated model parameters, directly involved model estimation. example, generated quantities can used simulate data posterior predictive model checks (PPMCs; e.g., Gelman et al., 2013). See details additional information quantity available.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generated quantities for diagnostic classification — generated-quantities","text":"","code":"generated_quantities(loglik = FALSE, probabilities = FALSE, ppmc = FALSE)"},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generated quantities for diagnostic classification — generated-quantities","text":"loglik Logical indicating whether log-likelihood generated. probabilities Logical indicating whether class attribute proficiency probabilities generated. ppmc Logical indicating whether replicated data sets PPMCs generated.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generated quantities for diagnostic classification — generated-quantities","text":"generated quantities object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generated quantities for diagnostic classification — generated-quantities","text":"log-likelihood contains respondent-level log-likelihood values. may useful calculating relative fit indices CV-LOO (Vehtari et al., 2017) WAIC (Watanabe, 2010). probabilities primary outputs interest respondent-level results. quantities include probability respondent belongs class, well attribute-level proficiency probabilities respondent. PPMCs generate vector new item responses based parameter values. , generated quantities replicated data sets used calculate PPMCs.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generated quantities for diagnostic classification — generated-quantities","text":"Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., & Rubin, D. B. (2013). Bayesian Data Analysis (3rd ed.). Chapman & Hall/CRC. https://sites.stat.columbia.edu/gelman/book/ Vehtari, ., Gelman, ., & Gabry, J. (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing, 27(5), 1413–1432. doi:10.1007/s11222-016-9696-4 Watanabe, S. (2010). Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory. Journal Machine Learning Research, 11(116), 3571–3594. http://jmlr.org/papers/v11/watanabe10a.html","code":""},{"path":"https://dcmstan.r-dcm.org/reference/generated-quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generated quantities for diagnostic classification — generated-quantities","text":"","code":"generated_quantities(loglik = TRUE) #> <dcmstan::GQS> #>  @ model_args:List of 3 #>  .. $ loglik       : logi TRUE #>  .. $ probabilities: logi FALSE #>  .. $ ppmc         : logi FALSE"},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify parameters included in a diagnostic classification model — get_parameters","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"specifying prior distributions, often useful see parameters included given model. Using Q-matrix type diagnostic model estimated, can create list included parameters prior can specified.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"","code":"get_parameters(x, qmatrix, ..., identifier = NULL)"},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"x model specification (e.g., dcm_specify(), measurement model (e.g., lcdm()), structural model (e.g., unconstrained()) object. qmatrix Q-matrix. data frame 1 row per item 1 column per attribute. May optionally include additional column item identifiers. identifier column included, specified identifier. cells remaining attribute columns either 0 (item measure attribute) 1 (item measure attribute). ... Additional arguments passed methods. identifier Optional. present, quoted name column qmatrix contains item identifiers.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"tibble showing available parameter types coefficients specified model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/get_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify parameters included in a diagnostic classification model — get_parameters","text":"","code":"qmatrix <- tibble::tibble(item = paste0(\"item_\", 1:10),                           att1 = sample(0:1, size = 10, replace = TRUE),                           att2 = sample(0:1, size = 10, replace = TRUE),                           att3 = sample(0:1, size = 10, replace = TRUE),                           att4 = sample(0:1, size = 10, replace = TRUE)) get_parameters(dina(), qmatrix = qmatrix, identifier = \"item\") #> # A tibble: 20 × 3 #>    item    type  coefficient #>    <chr>   <chr> <chr>       #>  1 item_1  slip  slip[1]     #>  2 item_1  guess guess[1]    #>  3 item_2  slip  slip[2]     #>  4 item_2  guess guess[2]    #>  5 item_3  slip  slip[3]     #>  6 item_3  guess guess[3]    #>  7 item_4  slip  slip[4]     #>  8 item_4  guess guess[4]    #>  9 item_5  slip  slip[5]     #> 10 item_5  guess guess[5]    #> 11 item_6  slip  slip[6]     #> 12 item_6  guess guess[6]    #> 13 item_7  slip  slip[7]     #> 14 item_7  guess guess[7]    #> 15 item_8  slip  slip[8]     #> 16 item_8  guess guess[8]    #> 17 item_9  slip  slip[9]     #> 18 item_9  guess guess[9]    #> 19 item_10 slip  slip[10]    #> 20 item_10 guess guess[10]"},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement models for diagnostic classification — measurement-model","title":"Measurement models for diagnostic classification — measurement-model","text":"measurement model defines items relate attributes. currently supported options measurement models : loglinear cognitive diagnostic model (LCDM); deterministic input, noisy \"\" gate (DINA); deterministic input, noisy, \"\" gate (DINO); noisy-input, deterministic \"\" gate (NIDA); noisy-input, deterministic \"\" gate (NIDO);, noncompensatory reparameterized unified model (NC-RUM); compensatory reparameterized unified model (C-RUM). See details additional information model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement models for diagnostic classification — measurement-model","text":"","code":"lcdm(max_interaction = Inf)  dina()  dino()  crum()  nida()  nido()  ncrum()"},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement models for diagnostic classification — measurement-model","text":"max_interaction LCDM, highest item-level interaction include model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement models for diagnostic classification — measurement-model","text":"measurement model object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measurement models for diagnostic classification — measurement-model","text":"LCDM (Henson et al., 2009; Henson & Templin, 2019) general diagnostic classification model subsumes restrictive models. probability respondent providing correct response parameterized like regression model. item, LCDM includes intercept, represents log-odds providing correct response none attributes required item present. Main effect parameters represent increase log-odds required attribute present. Finally, interaction terms define change log-odds (main effects) one required attributes present.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"non-compensatory-models","dir":"Reference","previous_headings":"","what":"Non-compensatory models","title":"Measurement models for diagnostic classification — measurement-model","text":"DINA model (de la Torre & Douglas, 2004; Junker & Sijtsma, 2001) restrictive non-compensatory model. item two parameters estimated. guessing parameter defines probability respondent providing correct response required attributes present. Conversely, slipping parameter defines probability providing incorrect response required attributes present. Thus, DINA model takes \"--nothing\" approach. Either respondent attributes required item, . increase probability providing correct response subset required attributes present. NIDA model (Junker & Sijtsma, 2001) non-compensatory model less restrictive DINA model. DINA model takes \"--nothing\" approach, NIDA model defines probability responding correctly based attribute mastered. , NIDA model estimates parameters attribute holds parameters constant across items. Thus, respondents increased probability responding correctly based specific attributes mastered. However, parameters held constant across items. , effect non-proficiency attribute items measuring attribute. reduced NC-RUM (DiBello et al., 1995; Hartz, 2002) non-compensatory model less restrictive DINA NIDA model, NC-RUM constrain parameters across items attributes. Thus, NC-RUM similar LCDM; however, equivalent LCDM parameterization NC-RUM constrains interaction parameters positive, differs full LCDM specification.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"compensatory-models","dir":"Reference","previous_headings":"","what":"Compensatory models","title":"Measurement models for diagnostic classification — measurement-model","text":"DINO model (Templin & Henson, 2006) inverse DINA model. Whereas DINA model \"--nothing\", DINO model can thought \"anything--nothing\". DINO model, guessing parameter defines probability correct response none required attributes present. slipping parameter probability incorrect response required attributes present. Therefore, using DINO model, presence required attributes results increased probability correct response, additional increase probability presence one required attributes. NIDO model (Templin, 2006) compensatory model defines probability responding correctly based attribute mastered. Like NIDA model, NIDO model holds parameters constant across items. NIDO model, probability responding correctly increases mastered attribute without assuming cumulative effect mastering multiple attributes. C-RUM (Hartz, 2002) similar LCDM, constrained include intercept main effect parameters. , interaction terms included C-RUM.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measurement models for diagnostic classification — measurement-model","text":"de la Torre, J., & Douglas, J. . (2004). Higher-order latent trait models cognitive diagnosis. Psychometrika, 69(3), 333-353. doi:10.1007/BF02295640 DiBello, L. V., Stout, W. F., & Roussos, L. (1995). Unified cognitive psychometric assessment likelihood-based classification techniques. P. D. Nichols, S. F. Chipman, & R. L. Brennan (Eds.), Cognitively diagnostic assessment (pp. 361-390). Erlbaum. Hartz, S. M. (2002). Bayesian framework unified model assessing cognitive abilities: Blending theory practicality (Publication . 3044108) [Doctoral dissertation, University Illinois Urbana-Champaign]. ProQuest Dissertations Publishing. Henson, R. ., Templin, J. L., & Willse, J. T. (2009). Defining family cognitive diagnosis models using log-linear models latent variables. Psychometrika, 74(2), 191-210. doi:10.1007/s11336-008-9089-5 Henson, R., & Templin, J. L. (2019). Loglinear cognitive diagnostic model (LCDM). M. von Davier & Y.-S. Lee (Eds.), Handbook Diagnostic Classification Models (pp. 171-185). Springer International Publishing. doi:10.1007/978-3-030-05584-4_8 Junker, B. W., & Sijtsma, K. (2001). Cognitive assessment models assumptions, connections nonparametric item response theory. Applied Psychological Measurement, 25(3), 258-272. doi:10.1177/01466210122032064 Templin, J. L. (2006). CDM user's guide. Unpublished manuscript. Templin, J. L., & Henson, R. . (2006). Measurement psychological disorders using cognitive diagnosis models. Psychological Methods, 11(3), 287-305. doi:10.1037/1082-989X.11.3.287","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/measurement-model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement models for diagnostic classification — measurement-model","text":"","code":"lcdm() #> <dcmstan::LCDM> #>  @ model     : chr \"lcdm\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num Inf  lcdm(max_interaction = 3) #> <dcmstan::LCDM> #>  @ model     : chr \"lcdm\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num 3  dina() #> <dcmstan::DINA> #>  @ model     : chr \"dina\" #>  @ model_args: list()  dino() #> <dcmstan::DINO> #>  @ model     : chr \"dino\" #>  @ model_args: list()  nida() #> <dcmstan::NIDA> #>  @ model     : chr \"nida\" #>  @ model_args: list()  nido() #> <dcmstan::NIDO> #>  @ model     : chr \"nido\" #>  @ model_args: list()  ncrum() #> <dcmstan::NCRUM> #>  @ model     : chr \"ncrum\" #>  @ model_args: list()  crum() #> <dcmstan::CRUM> #>  @ model     : chr \"crum\" #>  @ model_args: list()"},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior definitions for diagnostic classification models — prior","title":"Prior definitions for diagnostic classification models — prior","text":"Define prior distributions types parameters specific parameters within model. complete list types parameters available given model, see get_parameters().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior definitions for diagnostic classification models — prior","text":"","code":"prior(distribution, type, coefficient = NA, lower_bound = NA, upper_bound = NA)  prior_string(distribution, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior definitions for diagnostic classification models — prior","text":"distribution distribution statement prior (e.g., normal(0, 2)). complete list available distributions, see Stan documentation https://mc-stan.org/docs/. type type parameter apply prior . Parameter types vary model. Use get_parameters() see list possible types chosen model. coefficient Name specific parameter within defined parameter type. NA (default), prior applied parameters within type. lower_bound Optional. lower bound distribution truncated. upper_bound Optional. upper bound distribution truncated. ... Additional arguments passed prior().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior definitions for diagnostic classification models — prior","text":"dcmprior object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior definitions for diagnostic classification models — prior","text":"prior() used directly specifying priors. , directly typing providing distribution statement function. previously created variable distribution statement character string (e.g., dist <- \"normal(0, 2)\"), use prior_string() create prior. See examples.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior definitions for diagnostic classification models — prior","text":"","code":"prior(normal(0, 2), type = \"intercept\") #> # A tibble: 1 × 3 #>   type      coefficient prior        #>   <chr>     <chr>       <chr>        #> 1 intercept NA          normal(0, 2)  c(prior(beta(5, 17), type = \"slip\"),   prior(beta(5, 25), type = \"guess\")) #> # A tibble: 2 × 3 #>   type  coefficient prior       #>   <chr> <chr>       <chr>       #> 1 slip  NA          beta(5, 17) #> 2 guess NA          beta(5, 25)  my_prior <- \"normal(0, 2)\" prior_string(my_prior, type = \"intercept\") #> # A tibble: 1 × 3 #>   type      coefficient prior        #>   <chr>     <chr>       <chr>        #> 1 intercept NA          normal(0, 2)"},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a dcmprior object to a tibble — prior_tibble","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"specifying prior distributions, often useful see parameters included given model. Using Q-matrix type diagnostic model estimated, can create list included parameters prior can specified.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"","code":"prior_tibble(x, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"x model specification (e.g., dcm_specify(), measurement model (e.g., lcdm()), structural model (e.g., unconstrained()) object. ... Additional arguments passed methods. See details.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"tibble showing specified priors.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"Additional arguments passed methods: .keep_all: Logical indicating components returned. FALSE (default), @type, @coefficient, @prior elements dcmprior object return. TRUE, @distribtuion, @lower_bound, @upper_bound also returned.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/prior_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a dcmprior object to a tibble — prior_tibble","text":"","code":"prior_tibble(default_dcm_priors(lcdm())) #> # A tibble: 3 × 3 #>   type        coefficient prior           #>   <chr>       <chr>       <chr>           #> 1 intercept   NA          normal(0, 2)    #> 2 maineffect  NA          lognormal(0, 1) #> 3 interaction NA          normal(0, 2)     prior_tibble(default_dcm_priors(dina(), independent())) #> # A tibble: 3 × 3 #>   type       coefficient prior       #>   <chr>      <chr>       <chr>       #> 1 slip       NA          beta(5, 25) #> 2 guess      NA          beta(5, 25) #> 3 structural NA          beta(1, 1)"},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 'Stan' code for a diagnostic classification models — stan_code","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"Given specification diagnostic classification model generated quantities definition, automatically generate 'Stan' code necessary estimate model. details code blocks relate diagnostic models, see da Silva et al. (2017), Jiang Carter (2019), Thompson (2019).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"","code":"stan_code(x, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"x model specification generated quantities object. ... Additional arguments passed methods.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"glue object containing 'Stan' code specified model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"da Silva, M. ., de Oliveira, E. S. B., von Davier, . ., Bazán, J. L. (2017). Estimating DINA model parameters using -U-Turn sampler. Biometrical Journal, 60(2), 352-368. doi:10.1002/bimj.201600225 Jiang, Z., & Carter, R. (2019). Using Hamiltonian Monte Carlo estimate log-linear cognitive diagnosis model via Stan. Behavior Research Methods, 51, 651-662. doi:10.3758/s13428-018-1069-9 Thompson, W. J. (2019). Bayesian psychometrics diagnostic assessments: proof concept (Research Report . 19-01). University Kansas; Accessible Teaching, Learning, Assessment Systems. doi:10.35542/osf.io/jzqs8","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 'Stan' code for a diagnostic classification models — stan_code","text":"","code":"qmatrix <- data.frame(   att1 = sample(0:1, size = 5, replace = TRUE),   att2 = sample(0:1, size = 5, replace = TRUE) )  model_spec <- dcm_specify(qmatrix = qmatrix,                           measurement_model = lcdm(),                           structural_model = unconstrained()) #> Error: <dcmstan::dcm_specification> object is invalid: #> - `priors` contain types not included in the model: \"interaction\"  stan_code(model_spec) #> Error: object 'model_spec' not found"},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of data objects for 'Stan' — stan_data","title":"Create a list of data objects for 'Stan' — stan_data","text":"using 'Stan' estimate model, data objects must passed list, name object corresponds name variable data block 'Stan' code. stan_data() creates list data objects needed estimate model, consistent data block generated stan_code().","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of data objects for 'Stan' — stan_data","text":"","code":"stan_data(x, ...)"},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of data objects for 'Stan' — stan_data","text":"x object (e.g., model specification) create data list . ... Additional arguments passed methods. See details.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of data objects for 'Stan' — stan_data","text":"list data objects.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of data objects for 'Stan' — stan_data","text":"Arguments model specification method: data: response data. data frame 1 row per respondent 1 column per item. May optionally include additional column item identifiers. identifier included, specified identifier. cells remaining item columns either 0 (incorrect response) 1 (correct response). missing: expression specifying missing values data encoded (e.g., NA, \".\", -99). default NA. identifier: Optional. present, quoted name column data contains respondent identifiers. Arguments generated quantities method: dcm_spec: cleaned data object, returned rdcmchecks::clean_data(). data: response data. data frame 1 row per respondent 1 column per item. May optionally include additional column item identifiers. identifier included, specified identifier. cells remaining item columns either 0 (incorrect response) 1 (correct response). missing: expression specifying missing values data encoded (e.g., NA, \".\", -99). default NA. identifier: Optional. present, quoted name column data contains respondent identifiers.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/stan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of data objects for 'Stan' — stan_data","text":"","code":"qmatrix <- data.frame(   att1 = sample(0:1, size = 5, replace = TRUE),   att2 = sample(0:1, size = 5, replace = TRUE) ) data <- data.frame(   item_1 = sample(0:1, size = 20, replace = TRUE),   item_2 = sample(0:1, size = 20, replace = TRUE),   item_3 = sample(0:1, size = 20, replace = TRUE),   item_4 = sample(0:1, size = 20, replace = TRUE),   item_5 = sample(0:1, size = 20, replace = TRUE) )  model_spec <- dcm_specify(qmatrix = qmatrix,                           measurement_model = lcdm(),                           structural_model = unconstrained())  stan_data(model_spec, data = data) #> $I #> [1] 5 #>  #> $R #> [1] 20 #>  #> $N #> [1] 100 #>  #> $C #> [1] 4 #>  #> $ii #>   [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 #>  [35] 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 #>  [69] 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 #>  #> $rr #>   [1]  1  1  1  1  1  2  2  2  2  2  3  3  3  3  3  4  4  4  4  4  5  5  5 #>  [24]  5  5  6  6  6  6  6  7  7  7  7  7  8  8  8  8  8  9  9  9  9  9 10 #>  [47] 10 10 10 10 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 14 14 14 14 #>  [70] 14 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 18 18 18 18 18 19 19 #>  [93] 19 19 19 20 20 20 20 20 #>  #> $y #>   [1] 0 0 1 0 1 0 1 1 0 1 1 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 #>  [35] 0 1 0 1 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 #>  [69] 0 0 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 #>  #> $start #>  [1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 #>  #> $num #>  [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 #>"},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural models for diagnostic classification — structural-model","title":"Structural models for diagnostic classification — structural-model","text":"Structural models define attributes related one another. currently supported options structural models : unconstrained, independent attributes, log-linear, hierarchical diagnostic classification model (HDCM). See details additional information model.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural models for diagnostic classification — structural-model","text":"","code":"unconstrained()  independent()  loglinear(max_interaction = Inf)  hdcm(hierarchy = NULL)"},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural models for diagnostic classification — structural-model","text":"max_interaction log-linear structural model, highest structural-level interaction include model. hierarchy Optional. present, quoted attribute hierarchy. See vignette(\"dagitty4semusers\", package = \"dagitty\") tutorial draw attribute hierarchy.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural models for diagnostic classification — structural-model","text":"structural model object.","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural models for diagnostic classification — structural-model","text":"unconstrained structural model places constraints attributes relate . equivalent saturated model described Hu & Templin (2020) Chapter 8 Rupp et al. (2010). independent attributes model assumes presence attributes unrelated . , relationship presence one attribute presence . example independent attributes model, see Lee (2016). loglinear structural model assumes class membership proportions can estimated using loglinear model includes main interaction effects (see Xu & von Davier, 2008). saturated loglinear structural model includes interaction effects attributes measured model, equivalent unconstrained structural model saturated model described Hu & Templin (2020) Chapter 8 Rupp et al. (2010). reduced form loglinear structural model containing main effects equivalent independent attributes model (e.g. Lee, 2016). hierarchical attributes model assumes attributes must mastered attributes can mastered. example hierarchical attributes model, see Leighton et al. (2004) Templin & Bradshaw (2014).","code":""},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Structural models for diagnostic classification — structural-model","text":"Hu, B., & Templin, J. (2020). Using diagnostic classification models validate attribute hierarchies evaluate model fit Bayesian Networks. Multivariate Behavioral Research, 55(2), 300-311. doi:10.1080/00273171.2019.1632165 Lee, S. Y. (2016). Cognitive diagnosis model: DINA model independent attributes. https://mc-stan.org/documentation/case-studies/dina_independent.html Leighton, J. P., Gierl, M. J., & Hunka, S. M. (2004). attribute hierarchy method cognitive assessment: variation Tatsuoka's rule-space approach. Journal Educational Measurement, 41(3), 205-237. doi:10.1111/j.1745-3984.2004.tb01163.x Rupp, . ., Templin, J., & Henson, R. . (2010). Diagnostic measurement: Theory, methods, applications. Guilford Press. Templin, J. L., & Bradshaw, L. (2014). Hierarchical diagnostic classification models: family models estimating testing attribute hierarchies. Psychometrika, 79(2), 317-339 doi:10.1007/s11336-013-9362-0 Xu, X., & von Davier, M. (2008). Fitting structured general diagnostic model NAEP data (RR-08-27). Princeton, NJ: Educational Testing Service.","code":""},{"path":[]},{"path":"https://dcmstan.r-dcm.org/reference/structural-model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural models for diagnostic classification — structural-model","text":"","code":"unconstrained() #> <dcmstan::UNCONSTRAINED> #>  @ model     : chr \"unconstrained\" #>  @ model_args: list()  independent() #> <dcmstan::INDEPENDENT> #>  @ model     : chr \"independent\" #>  @ model_args: list()  loglinear() #> <dcmstan::LOGLINEAR> #>  @ model     : chr \"loglinear\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num Inf  loglinear(max_interaction = 1) #> <dcmstan::LOGLINEAR> #>  @ model     : chr \"loglinear\" #>  @ model_args:List of 1 #>  .. $ max_interaction: num 1  hdcm(hierarchy = \"att1 -> att2 -> att3\") #> <dcmstan::HDCM> #>  @ model     : chr \"hdcm\" #>  @ model_args:List of 1 #>  .. $ hierarchy: chr \"att1 -> att2 -> att3\""}]
